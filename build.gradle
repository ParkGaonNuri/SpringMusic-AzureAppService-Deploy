plugins {
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'eclipse-wtp'
    id 'idea'
    id 'com.microsoft.azure.azurewebapp' version '1.7.1'
}

repositories {
    mavenCentral()
}

ext {
    javaCfEnvVersion = '2.4.0'
    
}

dependencies {
    // Spring Boot
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-data-mongodb"
    implementation "org.springframework.boot:spring-boot-starter-data-redis"
    implementation "org.springframework.boot:spring-boot-starter-validation"

    // Java CfEnv
    implementation "io.pivotal.cfenv:java-cfenv-boot:${javaCfEnvVersion}"

    // JPA Persistence
    runtimeOnly "org.apache.commons:commons-pool2"
    runtimeOnly "com.h2database:h2"
    runtimeOnly "mysql:mysql-connector-java"
    runtimeOnly "org.postgresql:postgresql"
    runtimeOnly "com.microsoft.sqlserver:mssql-jdbc"

    // uncomment to use Lettuce instead of Jedis for Redis connections
    // runtime "io.lettuce:lettuce-core"

    // Webjars
    implementation "org.webjars:bootstrap:3.1.1"
    implementation "org.webjars:angularjs:1.2.16"
    implementation "org.webjars:angular-ui:0.4.0-2"
    implementation "org.webjars:angular-ui-bootstrap:0.10.0-1"
    implementation "org.webjars:jquery:2.1.0-2"

    // Oracle - uncomment one of the following after placing driver in ./libs
    // compile files('libs/ojdbc8.jar')
    // compile files('libs/ojdbc7.jar')
   

    // Testing
    testImplementation "junit:junit"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
}


java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_11

    if (JavaVersion.current() != project.targetCompatibility) {
        logger.warn("The build is using Java ${JavaVersion.current()} to build a Java ${project.targetCompatibility} compatible archive.")
        logger.warn("See the project README for instructions on changing the target Java version.")
    }
}

jar {
    enabled = false
}

azurewebapp {
	// Input Parameter 적용
	def env = project.hasProperty("env")? project.getProperty("env"): null
	def app = project.hasProperty("app")? project.getProperty("app"): null
	
	// env, app이름이 일치하지 않을 경우 예외처리
	if (!["prod", "dev", "qa"].contains(env)) {
		throw new GradleException("There are no valid env property values.")
	} else if (!["app", "web"].contains(app)) {
		throw new GradleException("There are no valid app property values.")
	} else if (env == null || app == null) {
		throw new GradleException("There are no valid property values.")
		println "Example : gradle azureWebAppDeploy -Penv=dev -Papp=app"
	} else {
		println "env: $env"
    	println "app: $app"
	}
	
	// App Service 환경 정보
    subscription = "<Subscription ID>"
    resourceGroup = "nuri-$env-rg"
    appName = "nuri-$env-$app"
    region = "koreacentral"
    runtime {
      os = "Linux"
      webContainer = "Java SE" 
      javaVersion = "Java 11"
    }
}
